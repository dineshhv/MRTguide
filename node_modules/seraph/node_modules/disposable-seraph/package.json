{
  "name": "disposable-seraph",
  "version": "0.3.2",
  "description": "create a disposable neo4j-shaped box for jamming data into",
  "main": "disposable-seraph.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "http://www.github.com/brikteknologier/disposable-seraph"
  },
  "keywords": [
    "seraph",
    "neo4j",
    "testing"
  ],
  "author": {
    "name": "Jon Packer"
  },
  "license": "MIT",
  "dependencies": {
    "async": "~0.2.6",
    "neo4j-supervisor": "~0.1.1",
    "neo4j-vm": "^0.1.11",
    "randy": "~1.4.0",
    "seraph": "~0.9.0"
  },
  "readme": "# disposable seraph \n\nThis is a small kit for spinning up a disposable neo4j database and wrapping it\nin a seraph object. This means that you can require this module, call the\nfunction, and you have a box to put your data in. No questions asked! You don't\neven need to install a database, we'll do that for you too.\n\nOf course, the first time you run this, it will take a few minutes to download\nneo4j. So be patient!\n\nThe callback for the function actually will give you two params after the err.\nThe most important is of course the first, `db` (the seraph object), but you \nalso get `neosv` which is the neo4j-supervisor object wrapping the db, so you \ncan do fun stuff like stopping, starting and murdering its data!\n\n```\nrequire('disposable-seraph')(function(err, db, neo) {\n  //db = seraph object pointing to a real DB!\n  //neo = neo4j-supervisor object\n})\n```\n\n## options\n\nYou can also pass an options object before the callback (or just set the opts\non the callback itselfâ€”why the hell not!). Possible settings:\n\n* `version` - neo4j version. defaults to `2.0.0-M03`\n* `edition` - neo4j edition. defaults to `community`\n* `port` - port to run neo4j on. defaults to a random number between 20000 and\n  60000.\n* `clean` - if set to `true`, the db will be cleaned every time it is run. This\n  is useful for use in a test environment (but neo4j's startup time is not such\n  that you could clean the db for every unit test).\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "disposable-seraph@0.3.2",
  "_shasum": "e178409f8f423403f9ea024f64707c8f06a267ac",
  "_from": "disposable-seraph@^0.3.1",
  "_resolved": "https://registry.npmjs.org/disposable-seraph/-/disposable-seraph-0.3.2.tgz"
}
